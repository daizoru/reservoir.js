// Generated by CoffeeScript 1.6.3
(function() {
  var XXHash, root,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  root = typeof window !== "undefined" && window !== null ? window : exports;

  root.pick = function(arr) {
    return arr[Math.floor(Math.random() * arr.length)];
  };

  root.isValid = function(value) {
    return !isNaN(value) && isFinite(value);
  };

  root.seed = 0xCAFEBABE;

  root.hash = function(obj) {
    var bytes, c1, c2, h1, h1b, i, k1, key, remainder;
    key = JSON.stringify(obj);
    remainder = key.length & 3;
    bytes = key.length - remainder;
    h1 = root.seed;
    c1 = 0xcc9e2d51;
    c2 = 0x1b873593;
    i = 0;
    while (i < bytes) {
      k1 = (key.charCodeAt(i) & 0xff) | ((key.charCodeAt(++i) & 0xff) << 8) | ((key.charCodeAt(++i) & 0xff) << 16) | ((key.charCodeAt(++i) & 0xff) << 24);
      ++i;
      k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
      k1 = (k1 << 15) | (k1 >>> 17);
      k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
      h1 ^= k1;
      h1 = (h1 << 13) | (h1 >>> 19);
      h1b = (((h1 & 0xffff) * 5) + ((((h1 >>> 16) * 5) & 0xffff) << 16)) & 0xffffffff;
      h1 = ((h1b & 0xffff) + 0x6b64) + ((((h1b >>> 16) + 0xe654) & 0xffff) << 16);
    }
    k1 = 0;
    if (remainder > 2) {
      k1 ^= (key.charCodeAt(i + 2) & 0xff) << 16;
    }
    if (remainder > 1) {
      k1 ^= (key.charCodeAt(i + 1) & 0xff) << 8;
    }
    if (remainder > 0) {
      k1 ^= key.charCodeAt(i) & 0xff;
    }
    k1 = (((k1 & 0xffff) * c1) + ((((k1 >>> 16) * c1) & 0xffff) << 16)) & 0xffffffff;
    k1 = (k1 << 15) | (k1 >>> 17);
    k1 = (((k1 & 0xffff) * c2) + ((((k1 >>> 16) * c2) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= k1;
    h1 ^= key.length;
    h1 ^= h1 >>> 16;
    h1 = (((h1 & 0xffff) * 0x85ebca6b) + ((((h1 >>> 16) * 0x85ebca6b) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 13;
    h1 = (((h1 & 0xffff) * 0xc2b2ae35) + ((((h1 >>> 16) * 0xc2b2ae35) & 0xffff) << 16)) & 0xffffffff;
    h1 ^= h1 >>> 16;
    return h1 >>> 0;
  };

  if ((typeof require !== "undefined" && require !== null) && (typeof Buffer !== "undefined" && Buffer !== null)) {
    try {
      XXHash = require('xxhash');
      root.hash = function(obj) {
        var str;
        str = new Buffer(JSON.stringify(obj));
        return XXHash.hash(str, root.seed);
      };
    } catch (_error) {}
  }

  root.Reservoir = (function() {
    function Reservoir(opts) {
      this.run = __bind(this.run, this);
      var _ref, _ref1;
      if (!opts.library) {
        throw "Error, missing library";
      }
      this.library = opts.library;
      this.reservoir = (_ref = opts.existing) != null ? _ref : {};
      this.max_size = (_ref1 = opts.max_size) != null ? _ref1 : 1000;
    }

    /*
    generate a random node, returning its unique id
    nodes with same source code will have the same id
    note: id unique id is computed using the hash
    */


    Reservoir.prototype.generate = function() {
      var arity, functions, i, id, name, nb_inputs, node, reservoirKeys;
      arity = Math.floor(Math.random() * this.library.length);
      functions = this.library[arity];
      name = root.pick(Object.keys(functions));
      reservoirKeys = this.list();
      nb_inputs = !reservoirKeys.length ? 0 : arity;
      node = {
        arity: arity,
        name: name,
        code: functions[name],
        inputs: (function() {
          var _i, _results;
          _results = [];
          for (i = _i = 0; 0 <= nb_inputs ? _i < nb_inputs : _i > nb_inputs; i = 0 <= nb_inputs ? ++_i : --_i) {
            _results.push(root.pick(reservoirKeys));
          }
          return _results;
        })()
      };
      id = root.hash(node).toString();
      this.reservoir[id] = node;
      return id;
    };

    /*
    recursively evaluate a node graph
    we take the cached values, so we never do more calls than the total number of elements
    */


    Reservoir.prototype.run = function(id) {
      var n, node, value;
      node = this.get(id);
      if (node == null) {
        return;
      }
      if (node.cache != null) {
        return node.cache;
      }
      value = node.code.apply(node, (function() {
        var _i, _len, _ref, _results;
        _ref = node.inputs;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          n = _ref[_i];
          _results.push(this.run(n));
        }
        return _results;
      }).call(this));
      if (root.isValid(value)) {
        node.cache = value;
        return value;
      } else {
        this["delete"](id);
      }
    };

    Reservoir.prototype.refill = function() {
      var i, id, len, _i, _ref;
      len = this.size();
      for (i = _i = len, _ref = this.max_size; len <= _ref ? _i < _ref : _i > _ref; i = len <= _ref ? ++_i : --_i) {
        id = this.generate();
        while (!root.isValid(this.run(id))) {
          id = this.generate();
        }
      }
      return this;
    };

    /*
    warm the reservoir by executing each function and storing the result in a cache
    bad functions will be removed
    */


    Reservoir.prototype.warm = function() {
      var id, _i, _len, _ref;
      _ref = this.list();
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        id = _ref[_i];
        this.run(id);
      }
      return this;
    };

    /*
    cool off the reservoir by flushing every cached value
    */


    Reservoir.prototype.flush = function() {
      var node, _, _ref;
      _ref = this.reservoir;
      for (_ in _ref) {
        node = _ref[_];
        delete node['cache'];
      }
      return this;
    };

    /*
    check if a function exists in the database
    */


    Reservoir.prototype.has = function(id) {
      return id in this.reservoir;
    };

    /*
    fetch a node
    */


    Reservoir.prototype.get = function(id) {
      return this.reservoir[id];
    };

    /*
    delete a node
    */


    Reservoir.prototype["delete"] = function(id) {
      return delete this.reservoir[id];
    };

    /*
    pick a random function ID
    */


    Reservoir.prototype.pick = function() {
      return root.pick(this.list());
    };

    /*
    returns the current reservoir size
    */


    Reservoir.prototype.size = function() {
      return this.list().length;
    };

    /*
    list all reservoir IDs (warning: can be large)
    */


    Reservoir.prototype.list = function() {
      return Object.keys(this.reservoir);
    };

    return Reservoir;

  })();

}).call(this);
